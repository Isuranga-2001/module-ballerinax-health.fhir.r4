// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r4;

public const string PROFILE_BASE_PAYERINSURANCEPLAN = "http://hl7.org/fhir/us/davinci-drug-formulary/StructureDefinition/usdf-PayerInsurancePlan";
public const RESOURCE_NAME_PAYERINSURANCEPLAN = "InsurancePlan";

# FHIR PayerInsurancePlan resource record.
#
# + resourceType - The type of the resource describes
# + coverage - Details about the coverage offered by the insurance product.
# * coverage Slicings
# 1) PayerInsurancePlanCoverageDrug_coverage: Coverage details
#       - min = 1
#       - max = *
#
# + identifier - Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The period of time that the health insurance product is available.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + administeredBy - An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
# + 'type - The kind of health insurance product.
# + network - Reference to the network included in the health insurance product.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + endpoint - The technical endpoints providing access to services operated for the health insurance product.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + contact - The contact for the health insurance product for a certain purpose.
# + name - Official name of the health insurance product as designated by the owner.
# + alias - A list of alternate names that the product is known as, or was known as in the past.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + ownedBy - The entity that is providing the health insurance product and underwriting the risk. This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
# + plan - Details about an insurance plan.
# * plan Slicings
# 1) PayerInsurancePlanPlanDrug_plan: Drug plan
#       - min = 1
#       - max = *
#
# + coverageArea - The geographic region in which a health insurance product's benefits apply.
# + status - The current state of the health insurance product.
@r4:ResourceDefinition {
    resourceType: "InsurancePlan",
    baseType: r4:DomainResource,
    profile: "http://hl7.org/fhir/us/davinci-drug-formulary/StructureDefinition/usdf-PayerInsurancePlan",
    elements: {
        "coverage" : {
            name: "coverage",
            dataType: PayerInsurancePlanCoverage,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.coverage"
        },
        "identifier" : {
            name: "identifier",
            dataType: r4:Identifier,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.identifier"
        },
        "extension" : {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.extension"
        },
        "period" : {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.period"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "administeredBy" : {
            name: "administeredBy",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.administeredBy"
        },
        "type" : {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: true,
            path: "InsurancePlan.type",
            valueSet: "http://hl7.org/fhir/us/davinci-pdex-plan-net/ValueSet/InsuranceProductTypeVS"
        },
        "network" : {
            name: "network",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.network"
        },
        "contained" : {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.contained"
        },
        "endpoint" : {
            name: "endpoint",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.endpoint"
        },
        "meta" : {
            name: "meta",
            dataType: PayerInsurancePlanMeta,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.meta"
        },
        "contact" : {
            name: "contact",
            dataType: PayerInsurancePlanContact,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.contact"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.name"
        },
        "alias" : {
            name: "alias",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.alias"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.implicitRules"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.id"
        },
        "text" : {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.text"
        },
        "ownedBy" : {
            name: "ownedBy",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "InsurancePlan.ownedBy"
        },
        "plan" : {
            name: "plan",
            dataType: PayerInsurancePlanPlan,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.plan"
        },
        "coverageArea" : {
            name: "coverageArea",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InsurancePlan.coverageArea"
        },
        "status" : {
            name: "status",
            dataType: PayerInsurancePlanStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "InsurancePlan.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|4.0.1"
        }
    },
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type PayerInsurancePlan record {|
    *r4:DomainResource;

    RESOURCE_NAME_PAYERINSURANCEPLAN resourceType = RESOURCE_NAME_PAYERINSURANCEPLAN;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanCoverage[] coverage;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.identifier constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.identifier constraint. This field must be an array containing at most one item."
        }
    }
    r4:Identifier[] identifier;
    r4:Extension[] extension?;
    r4:Period period?;
    r4:Extension[] modifierExtension?;
    r4:code language?;
    r4:Reference administeredBy?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.type constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.type constraint. This field must be an array containing at most one item."
        }
    }
    r4:CodeableConcept[] 'type;
    r4:Reference[] network?;
    r4:Resource[] contained?;
    r4:Reference[] endpoint?;
    PayerInsurancePlanMeta meta?;
    PayerInsurancePlanContact[] contact?;
    string name?;
    string[] alias?;
    r4:uri implicitRules?;
    string id?;
    r4:Narrative text?;
    r4:Reference ownedBy?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanPlan[] plan;
    r4:Reference[] coverageArea?;
    PayerInsurancePlanStatus status;
    r4:Element ...;
|};

# FHIR PayerInsurancePlanCoverage datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of coverage (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
# + benefit - Specific benefits under this type of coverage.
# + network - Reference to the network that providing the type of coverage.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanCoverage",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.coverage.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.coverage.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.coverage.id"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of coverage (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).",
            path: "InsurancePlan.coverage.type"
        },
        "benefit": {
            name: "benefit",
            dataType: PayerInsurancePlanCoverageBenefit,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Specific benefits under this type of coverage.",
            path: "InsurancePlan.coverage.benefit"
        },
        "network": {
            name: "network",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Reference to the network that providing the type of coverage.",
            path: "InsurancePlan.coverage.network"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanCoverage record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:CodeableConcept 'type;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage.benefit constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage.benefit constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanCoverageBenefit[] benefit;
    r4:Reference[] network?;
|};

# FHIR PayerInsurancePlanCoverageBenefitLimitOne datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The specific limit on the benefit.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + value - The maximum amount of a service item a plan will pay for a covered benefit. For examples. wellness visits, or eyeglasses.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanCoverageBenefitLimitOne",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.coverage.benefit.limit.extension"
        },
        "code": {
            name: "code",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The specific limit on the benefit.",
            path: "InsurancePlan.coverage.benefit.limit.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.coverage.benefit.limit.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.coverage.benefit.limit.id"
        },
        "value": {
            name: "value",
            dataType: r4:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The maximum amount of a service item a plan will pay for a covered benefit. For examples. wellness visits, or eyeglasses.",
            path: "InsurancePlan.coverage.benefit.limit.value"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanCoverageBenefitLimitOne record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:CodeableConcept code?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:Quantity value?;
|};

# FHIR PayerInsurancePlanPlanTypeCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
# + display - A representation of the meaning of the code in the system, following the rules of the system.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanTypeCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "InsurancePlan.plan.type.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "InsurancePlan.plan.type.coding.code"
        },
        "display": {
            name: "display",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A representation of the meaning of the code in the system, following the rules of the system.",
            path: "InsurancePlan.plan.type.coding.display"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanTypeCoding record {|
    *r4:Coding;

    r4:uri system = "http://terminology.hl7.org/CodeSystem/insurance-plan-type";
    r4:code code = "drug";
    string display = "Drug";
|};

# FHIR PayerInsurancePlanPlanSpecificCostBenefitCostOne datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + qualifiers - Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
# + applicability - Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of cost (copay; individual cap; family cap; coinsurance; deductible).
# + value - The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanSpecificCostBenefitCostOne",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.specificCost.benefit.cost.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.modifierExtension"
        },
        "qualifiers": {
            name: "qualifiers",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: true,
            description: "Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.qualifiers"
        },
        "applicability": {
            name: "applicability",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.applicability"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.specificCost.benefit.cost.id"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of cost (copay; individual cap; family cap; coinsurance; deductible).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.type"
        },
        "value": {
            name: "value",
            dataType: r4:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.value"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanSpecificCostBenefitCostOne record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.specificCost.benefit.cost.qualifiers constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.specificCost.benefit.cost.qualifiers constraint. This field must be an array containing at most one item."
        }
    }
    r4:CodeableConcept[] qualifiers;
    r4:CodeableConcept applicability?;
    string id?;
    r4:CodeableConcept 'type;
    r4:Quantity value?;
|};

# FHIR PayerInsurancePlanContact datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + address - Visiting or postal addresses for the contact.
# + purpose - Indicates a purpose for which the contact can be reached.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - A name associated with the contact.
# + telecom - A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanContact",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.contact.extension"
        },
        "address": {
            name: "address",
            dataType: r4:Address,
            min: 0,
            max: 1,
            isArray: false,
            description: "Visiting or postal addresses for the contact.",
            path: "InsurancePlan.contact.address"
        },
        "purpose": {
            name: "purpose",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates a purpose for which the contact can be reached.",
            path: "InsurancePlan.contact.purpose"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.contact.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: r4:HumanName,
            min: 0,
            max: 1,
            isArray: false,
            description: "A name associated with the contact.",
            path: "InsurancePlan.contact.name"
        },
        "telecom": {
            name: "telecom",
            dataType: r4:ContactPoint,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.",
            path: "InsurancePlan.contact.telecom"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.contact.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanContact record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Address address?;
    r4:CodeableConcept purpose?;
    r4:Extension[] modifierExtension?;
    r4:HumanName name?;
    r4:ContactPoint[] telecom?;
    string id?;
|};

# FHIR PayerInsurancePlanPlanSpecificCostBenefit datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + cost - List of the costs associated with a specific benefit.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanSpecificCostBenefit",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.specificCost.benefit.extension"
        },
        "cost": {
            name: "cost",
            dataType: PayerInsurancePlanPlanSpecificCostBenefitCost,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "List of the costs associated with a specific benefit.",
            path: "InsurancePlan.plan.specificCost.benefit.cost"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.specificCost.benefit.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.specificCost.benefit.id"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).",
            path: "InsurancePlan.plan.specificCost.benefit.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanSpecificCostBenefit record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    PayerInsurancePlanPlanSpecificCostBenefitCost[] cost?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:CodeableConcept 'type;
|};

# FHIR PayerInsurancePlanPlanSpecificCostBenefitCost datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + qualifiers - Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
# + applicability - Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of cost (copay; individual cap; family cap; coinsurance; deductible).
# + value - The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanSpecificCostBenefitCost",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.specificCost.benefit.cost.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.modifierExtension"
        },
        "qualifiers": {
            name: "qualifiers",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.qualifiers"
        },
        "applicability": {
            name: "applicability",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.applicability"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.specificCost.benefit.cost.id"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of cost (copay; individual cap; family cap; coinsurance; deductible).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.type"
        },
        "value": {
            name: "value",
            dataType: r4:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).",
            path: "InsurancePlan.plan.specificCost.benefit.cost.value"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanSpecificCostBenefitCost record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    r4:CodeableConcept[] qualifiers?;
    r4:CodeableConcept applicability?;
    string id?;
    r4:CodeableConcept 'type;
    r4:Quantity value?;
|};

# FHIR PayerInsurancePlanPlanSpecificCostOne datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + category - General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
# + benefit - List of the specific benefits under this category of benefit.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanSpecificCostOne",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.specificCost.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.specificCost.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.specificCost.id"
        },
        "category": {
            name: "category",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).",
            path: "InsurancePlan.plan.specificCost.category"
        },
        "benefit": {
            name: "benefit",
            dataType: PayerInsurancePlanPlanSpecificCostBenefitOne,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "List of the specific benefits under this category of benefit.",
            path: "InsurancePlan.plan.specificCost.benefit"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanSpecificCostOne record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:CodeableConcept category;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.specificCost.benefit constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.specificCost.benefit constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanPlanSpecificCostBenefitOne[] benefit;
|};

# PayerInsurancePlanContactTelecomSystem enum
public enum PayerInsurancePlanContactTelecomSystem {
   CODE_SYSTEM_OTHER = "other",
   CODE_SYSTEM_PAGER = "pager",
   CODE_SYSTEM_PHONE = "phone",
   CODE_SYSTEM_SMS = "sms",
   CODE_SYSTEM_FAX = "fax",
   CODE_SYSTEM_EMAIL = "email",
   CODE_SYSTEM_URL = "url"
}

# FHIR PayerInsurancePlanMeta datatype record.
#
# + lastUpdated - When the resource last changed - e.g. when the version changed.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + security - Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
# + versionId - The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
# + profile - A list of profiles (references to [StructureDefinition](http://hl7.org/fhir/R4/structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](http://hl7.org/fhir/R4/structuredefinition-definitions.html#StructureDefinition.url).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](http://hl7.org/fhir/R4/provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
# + tag - Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanMeta",
    baseType: (),
    elements: {
        "lastUpdated": {
            name: "lastUpdated",
            dataType: r4:instant,
            min: 1,
            max: 1,
            isArray: false,
            description: "When the resource last changed - e.g. when the version changed.",
            path: "InsurancePlan.meta.lastUpdated"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.meta.extension"
        },
        "security": {
            name: "security",
            dataType: r4:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
            path: "InsurancePlan.meta.security"
        },
        "versionId": {
            name: "versionId",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.",
            path: "InsurancePlan.meta.versionId"
        },
        "profile": {
            name: "profile",
            dataType: r4:canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A list of profiles (references to [StructureDefinition](http://hl7.org/fhir/R4/structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](http://hl7.org/fhir/R4/structuredefinition-definitions.html#StructureDefinition.url).",
            path: "InsurancePlan.meta.profile"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.meta.id"
        },
        "source": {
            name: "source",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](http://hl7.org/fhir/R4/provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.",
            path: "InsurancePlan.meta.source"
        },
        "tag": {
            name: "tag",
            dataType: r4:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
            path: "InsurancePlan.meta.tag"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanMeta record {|
    *r4:Meta;

    r4:instant lastUpdated;
    r4:Extension[] extension?;
    r4:Coding[] security?;
    r4:id versionId?;
    r4:canonical[] profile?;
    string id?;
    r4:uri 'source?;
    r4:Coding[] tag?;
|};

# FHIR PayerInsurancePlanPlanSpecificCost datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + category - General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
# + benefit - List of the specific benefits under this category of benefit.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanSpecificCost",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.specificCost.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.specificCost.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.specificCost.id"
        },
        "category": {
            name: "category",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).",
            path: "InsurancePlan.plan.specificCost.category"
        },
        "benefit": {
            name: "benefit",
            dataType: PayerInsurancePlanPlanSpecificCostBenefit,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "List of the specific benefits under this category of benefit.",
            path: "InsurancePlan.plan.specificCost.benefit"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanSpecificCost record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:CodeableConcept category;
    PayerInsurancePlanPlanSpecificCostBenefit[] benefit?;
|};

# FHIR PayerInsurancePlanPlanType datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanType",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: PayerInsurancePlanPlanTypeCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "InsurancePlan.plan.type.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanType record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.type.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.type.coding constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanPlanTypeCoding[] coding;
|};

# FHIR PayerInsurancePlanCoverageDrug_coverage datatype record.
#
# + extension - An Extension
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of coverage (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
# + benefit - Specific benefits under this type of coverage.
# + network - Reference to the network that providing the type of coverage.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanCoverageDrug_coverage",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "An Extension",
            path: "InsurancePlan.coverage.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.coverage.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.coverage.id"
        },
        "type": {
            name: "type",
            dataType: PayerInsurancePlanCoverageType,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of coverage (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).",
            path: "InsurancePlan.coverage.type"
        },
        "benefit": {
            name: "benefit",
            dataType: PayerInsurancePlanCoverageBenefitOne,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Specific benefits under this type of coverage.",
            path: "InsurancePlan.coverage.benefit"
        },
        "network": {
            name: "network",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Reference to the network that providing the type of coverage.",
            path: "InsurancePlan.coverage.network"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanCoverageDrug_coverage record {|
    *PayerInsurancePlanCoverage;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage.extension constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage.extension constraint. This field must be an array containing at most one item."
        }
    }
    r4:Extension[] extension;
    r4:Extension[] modifierExtension?;
    string id?;
    PayerInsurancePlanCoverageType 'type;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage.benefit constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage.benefit constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanCoverageBenefitOne[] benefit;
    r4:Reference[] network?;
|};

# FHIR PayerInsurancePlanCoverageType datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanCoverageType",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: PayerInsurancePlanCoverageTypeCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "InsurancePlan.coverage.type.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanCoverageType record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage.type.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.coverage.type.coding constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanCoverageTypeCoding[] coding;
|};

# PayerInsurancePlanStatus enum
public enum PayerInsurancePlanStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR PayerInsurancePlanPlanGeneralCost datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + cost - Value of the cost.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + comment - Additional information about the general costs associated with this plan.
# + groupSize - Number of participants enrolled in the plan.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of cost.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanGeneralCost",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.generalCost.extension"
        },
        "cost": {
            name: "cost",
            dataType: r4:Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "Value of the cost.",
            path: "InsurancePlan.plan.generalCost.cost"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.generalCost.modifierExtension"
        },
        "comment": {
            name: "comment",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Additional information about the general costs associated with this plan.",
            path: "InsurancePlan.plan.generalCost.comment"
        },
        "groupSize": {
            name: "groupSize",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Number of participants enrolled in the plan.",
            path: "InsurancePlan.plan.generalCost.groupSize"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.generalCost.id"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of cost.",
            path: "InsurancePlan.plan.generalCost.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanGeneralCost record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Money cost?;
    r4:Extension[] modifierExtension?;
    string comment?;
    r4:positiveInt groupSize?;
    string id?;
    r4:CodeableConcept 'type?;
|};

# FHIR PayerInsurancePlanCoverageBenefit datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'limit - The specific limits on the benefit.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + requirement - The referral requirements to have access/coverage for this benefit.
# + 'type - Type of benefit (primary care; speciality care; inpatient; outpatient).
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanCoverageBenefit",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.coverage.benefit.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.coverage.benefit.modifierExtension"
        },
        "limit": {
            name: "limit",
            dataType: PayerInsurancePlanCoverageBenefitLimit,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The specific limits on the benefit.",
            path: "InsurancePlan.coverage.benefit.limit"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.coverage.benefit.id"
        },
        "requirement": {
            name: "requirement",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The referral requirements to have access/coverage for this benefit.",
            path: "InsurancePlan.coverage.benefit.requirement"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of benefit (primary care; speciality care; inpatient; outpatient).",
            path: "InsurancePlan.coverage.benefit.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanCoverageBenefit record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    PayerInsurancePlanCoverageBenefitLimit[] 'limit?;
    string id?;
    string requirement?;
    r4:CodeableConcept 'type;
|};

# FHIR PayerInsurancePlanPlanSpecificCostBenefitOne datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + cost - List of the costs associated with a specific benefit.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanSpecificCostBenefitOne",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.specificCost.benefit.extension"
        },
        "cost": {
            name: "cost",
            dataType: PayerInsurancePlanPlanSpecificCostBenefitCostOne,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "List of the costs associated with a specific benefit.",
            path: "InsurancePlan.plan.specificCost.benefit.cost"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.specificCost.benefit.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.specificCost.benefit.id"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).",
            path: "InsurancePlan.plan.specificCost.benefit.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanSpecificCostBenefitOne record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.specificCost.benefit.cost constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.specificCost.benefit.cost constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanPlanSpecificCostBenefitCostOne[] cost;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:CodeableConcept 'type;
|};

# FHIR PayerInsurancePlanCoverageBenefitOne datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'limit - The specific limits on the benefit.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + requirement - The referral requirements to have access/coverage for this benefit.
# + 'type - Type of benefit (primary care; speciality care; inpatient; outpatient).
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanCoverageBenefitOne",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.coverage.benefit.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.coverage.benefit.modifierExtension"
        },
        "limit": {
            name: "limit",
            dataType: PayerInsurancePlanCoverageBenefitLimitOne,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The specific limits on the benefit.",
            path: "InsurancePlan.coverage.benefit.limit"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.coverage.benefit.id"
        },
        "requirement": {
            name: "requirement",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The referral requirements to have access/coverage for this benefit.",
            path: "InsurancePlan.coverage.benefit.requirement"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of benefit (primary care; speciality care; inpatient; outpatient).",
            path: "InsurancePlan.coverage.benefit.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanCoverageBenefitOne record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    PayerInsurancePlanCoverageBenefitLimitOne[] 'limit?;
    string id?;
    string requirement?;
    r4:CodeableConcept 'type;
|};

# FHIR PayerInsurancePlanPlanDrug_plan datatype record.
#
# + identifier - Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + specificCost - Costs associated with the coverage provided by the product.
# + 'type - Type of plan. For example, 'Platinum' or 'High Deductable'.
# + coverageArea - The geographic region in which a health insurance plan's benefits apply.
# + generalCost - Overall costs associated with the plan.
# + network - Reference to the network that providing the type of coverage.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanDrug_plan",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.",
            path: "InsurancePlan.plan.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.id"
        },
        "specificCost": {
            name: "specificCost",
            dataType: PayerInsurancePlanPlanSpecificCostOne,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Costs associated with the coverage provided by the product.",
            path: "InsurancePlan.plan.specificCost"
        },
        "type": {
            name: "type",
            dataType: PayerInsurancePlanPlanType,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of plan. For example, 'Platinum' or 'High Deductable'.",
            path: "InsurancePlan.plan.type"
        },
        "coverageArea": {
            name: "coverageArea",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The geographic region in which a health insurance plan's benefits apply.",
            path: "InsurancePlan.plan.coverageArea"
        },
        "generalCost": {
            name: "generalCost",
            dataType: PayerInsurancePlanPlanGeneralCostOne,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Overall costs associated with the plan.",
            path: "InsurancePlan.plan.generalCost"
        },
        "network": {
            name: "network",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Reference to the network that providing the type of coverage.",
            path: "InsurancePlan.plan.network"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanDrug_plan record {|
    *PayerInsurancePlanPlan;

    r4:Identifier[] identifier?;
    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    string id?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.specificCost constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.InsurancePlan.plan.specificCost constraint. This field must be an array containing at most one item."
        }
    }
    PayerInsurancePlanPlanSpecificCostOne[] specificCost;
    PayerInsurancePlanPlanType 'type;
    r4:Reference[] coverageArea?;
    PayerInsurancePlanPlanGeneralCostOne[] generalCost?;
    r4:Reference[] network?;
|};

# FHIR PayerInsurancePlanPlan datatype record.
#
# + identifier - Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + specificCost - Costs associated with the coverage provided by the product.
# + 'type - Type of plan. For example, 'Platinum' or 'High Deductable'.
# + coverageArea - The geographic region in which a health insurance plan's benefits apply.
# + generalCost - Overall costs associated with the plan.
# + network - Reference to the network that providing the type of coverage.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlan",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.",
            path: "InsurancePlan.plan.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.id"
        },
        "specificCost": {
            name: "specificCost",
            dataType: PayerInsurancePlanPlanSpecificCost,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Costs associated with the coverage provided by the product.",
            path: "InsurancePlan.plan.specificCost"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of plan. For example, 'Platinum' or 'High Deductable'.",
            path: "InsurancePlan.plan.type"
        },
        "coverageArea": {
            name: "coverageArea",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The geographic region in which a health insurance plan's benefits apply.",
            path: "InsurancePlan.plan.coverageArea"
        },
        "generalCost": {
            name: "generalCost",
            dataType: PayerInsurancePlanPlanGeneralCost,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Overall costs associated with the plan.",
            path: "InsurancePlan.plan.generalCost"
        },
        "network": {
            name: "network",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Reference to the network that providing the type of coverage.",
            path: "InsurancePlan.plan.network"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlan record {|
    *r4:BackboneElement;

    r4:Identifier[] identifier?;
    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    string id?;
    PayerInsurancePlanPlanSpecificCost[] specificCost?;
    r4:CodeableConcept 'type?;
    r4:Reference[] coverageArea?;
    PayerInsurancePlanPlanGeneralCost[] generalCost?;
    r4:Reference[] network?;
|};

# PayerInsurancePlanContactNameUse enum
public enum PayerInsurancePlanContactNameUse {
   CODE_USE_MAIDEN = "maiden",
   CODE_USE_TEMP = "temp",
   CODE_USE_USUAL = "usual",
   CODE_USE_OLD = "old",
   CODE_USE_NICKNAME = "nickname",
   CODE_USE_OFFICIAL = "official",
   CODE_USE_ANONYMOUS = "anonymous"
}

# PayerInsurancePlanContactTelecomUse enum
public enum PayerInsurancePlanContactTelecomUse {
   CODE_USE_TEMP = "temp",
   CODE_USE_WORK = "work",
   CODE_USE_OLD = "old",
   CODE_USE_MOBILE = "mobile",
   CODE_USE_HOME = "home"
}

# FHIR PayerInsurancePlanPlanGeneralCostOne datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + cost - Value of the cost.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + comment - Additional information about the general costs associated with this plan.
# + groupSize - Number of participants enrolled in the plan.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of cost.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanPlanGeneralCostOne",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.plan.generalCost.extension"
        },
        "cost": {
            name: "cost",
            dataType: r4:Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "Value of the cost.",
            path: "InsurancePlan.plan.generalCost.cost"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.plan.generalCost.modifierExtension"
        },
        "comment": {
            name: "comment",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Additional information about the general costs associated with this plan.",
            path: "InsurancePlan.plan.generalCost.comment"
        },
        "groupSize": {
            name: "groupSize",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Number of participants enrolled in the plan.",
            path: "InsurancePlan.plan.generalCost.groupSize"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.plan.generalCost.id"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of cost.",
            path: "InsurancePlan.plan.generalCost.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanPlanGeneralCostOne record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Money cost?;
    r4:Extension[] modifierExtension?;
    string comment?;
    r4:positiveInt groupSize?;
    string id?;
    r4:CodeableConcept 'type?;
|};

# FHIR PayerInsurancePlanCoverageTypeCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanCoverageTypeCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "InsurancePlan.coverage.type.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "InsurancePlan.coverage.type.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanCoverageTypeCoding record {|
    *r4:Coding;

    r4:uri system = "http://terminology.hl7.org/CodeSystem/v3-ActCode";
    r4:code code = "DRUGPOL";
|};

# FHIR PayerInsurancePlanCoverageBenefitLimit datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The specific limit on the benefit.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + value - The maximum amount of a service item a plan will pay for a covered benefit. For examples. wellness visits, or eyeglasses.
@r4:DataTypeDefinition {
    name: "PayerInsurancePlanCoverageBenefitLimit",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InsurancePlan.coverage.benefit.limit.extension"
        },
        "code": {
            name: "code",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The specific limit on the benefit.",
            path: "InsurancePlan.coverage.benefit.limit.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InsurancePlan.coverage.benefit.limit.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InsurancePlan.coverage.benefit.limit.id"
        },
        "value": {
            name: "value",
            dataType: r4:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The maximum amount of a service item a plan will pay for a covered benefit. For examples. wellness visits, or eyeglasses.",
            path: "InsurancePlan.coverage.benefit.limit.value"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type PayerInsurancePlanCoverageBenefitLimit record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:CodeableConcept code?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:Quantity value?;
|};

